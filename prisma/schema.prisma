// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// vitess가 RDB가 아니기 때문에 FK로 인한 에러가 안난다. ( mysql은 FK 유무에 따른 에러 발생시켜줌 )
// vitess는 어디까지나 MySql 호환되는 DB일 뿐이지 완전한 RDB가 아닌 듯. 그래서 FK로 인한 에러 확인을 prisma한테 시켜준다.
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // referentialIntegrity => 객체를 연결할때 그 객체가 존재해야 한다 ( FK )
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma" // 이 작업은 prisma가 하라는 설정
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique // not required
  email           String?     @unique // not required
  avatar          String?
  name            String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt // User가 update 될때 갱신되도록 
  tokens          Token[]
  products        Product[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtedReviews  Review[]    @relation(name: "writtedReviews")
  receviedReviews Review[]    @relation(name: "receviedReviews")
  favs            Fav[]
  sales           Sale[]
  purchases       Purchase[]
  record          Record[]
  streams         Stream[]
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.LongText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  record      Record[]
}

model Post {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  latitude   Float?
  longitude  Float?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  answers    Answer[]
  wonderings Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  score        Int      @default(1)
  createdBy    User     @relation(name: "writtedReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receviedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id          Int       @id @default(autoincrement())
  name        String
  price       Int
  description String    @db.MediumText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}
